Function.arguments 
 An array corresponding to the arguments passed to a function. This is deprecated as property of Function, use the arguments object available within the function instead. 

Function.arity 
 Used to specifiy the number of arguments expected by the function, but has been removed. Use the length property instead. 

Function.caller 
 Specifies the function that invoked the currently executing function. 

Function.length 
 Specifies the number of arguments expected by the function. 

Function.name 
 The name of the function. 

Function.displayName 
 The display name of the function. 

Function.prototype.constructor 
 Specifies the function that creates an object's prototype. See Object.prototype.constructor for more details. 

Function.prototype.apply() 
 Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object. 

Function.prototype.bind() 
 Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called. 

Function.prototype.call() 
 Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are. 

Function.prototype.isGenerator() 
 Returns true if the function is a generator; otherwise returns false. 

Function.prototype.toSource() 
 Returns a string representing the source code of the function. Overrides the Object.prototype.toSource method. 

Function.prototype.toString() 
 Returns a string representing the source code of the function. Overrides the Object.prototype.toString method. 

String.prototype 
 Allows the addition of properties to a String object. 

String.fromCharCode() 
 Returns a string created by using the specified sequence of Unicode values. 

String.fromCodePoint() 
 Returns a string created by using the specified sequence of code points. 

String.raw() 
 Returns a string created from a raw template string. 

Object.prototype.constructor 
 Specifies the function that creates an object's prototype. 

Object.prototype.__proto__ 
 Points to the object which was used as prototype when the object was instantiated. 

Object.prototype.__noSuchMethod__ 
 Allows a function to be defined that will be executed when an undefined object member is called as a method. 

Object.prototype.__count__ 
 Used to return the number of enumerable properties directly on a user-defined object, but has been removed. 

Object.prototype.__parent__ 
 Used to point to an object's context, but has been removed. 

Object.prototype.__defineGetter__() 
 Associates a function with a property that, when accessed, executes that function and returns its return value. 

Object.prototype.__defineSetter__() 
 Associates a function with a property that, when set, executes that function which modifies the property. 

Object.prototype.__lookupGetter__() 
 Returns the function associated with the specified property by the __defineGetter__ method. 

Object.prototype.__lookupSetter__() 
 Returns the function associated with the specified property by the __defineSetter__ method. 

Object.prototype.hasOwnProperty() 
 Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain. 

Object.prototype.isPrototypeOf() 
 Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon. 

Object.prototype.propertyIsEnumerable() 
 Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set. 

Object.prototype.toSource() 
 Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object. 

Object.prototype.toLocaleString() 
 Calls toString(). 

Object.prototype.toString() 
 Returns a string representation of the object. 

Object.prototype.unwatch() 
 Removes a watchpoint from a property of the object. 

Object.prototype.valueOf() 
 Returns the primitive value of the specified object. 

Object.prototype.watch() 
 Adds a watchpoint to a property of the object. 

Object.prototype.eval() 
 Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed. 

Boolean.length 
 Length property whose value is 1. 

Boolean.prototype 
 Represents the prototype for the Boolean constructor. 

Number.EPSILON 
 The smallest interval between two representable numbers. 

Number.MAX_SAFE_INTEGER 
 The maximum safe integer in JavaScript (253 - 1). 

Number.MAX_VALUE 
 The largest positive representable number. 

Number.MIN_SAFE_INTEGER 
 The minimum safe integer in JavaScript (-(253 - 1)). 

Number.MIN_VALUE 
 The smallest positive representable number - that is, the positive number closest to zero (without actually being zero). 

Number.NaN 
 Special "not a number" value. 

Number.NEGATIVE_INFINITY 
 Special value representing negative infinity; returned on overflow. 

Number.POSITIVE_INFINITY 
 Special value representing infinity; returned on overflow. 

Number.prototype 
 Allows the addition of properties to a Number object. 

Number.isNaN() 
 Determine whether the passed value is NaN. 

Number.isFinite() 
 Determine whether the passed value is a finite number. 

Number.isInteger() 
 Determine whether the passed value is an integer. 

Number.isSafeInteger() 
 Determine whether theÂ passed value is a safe integer (number between -(253 - 1) and 253 - 1). 

Number.toInteger() 
 Used to evaluate the passed value and convert it to an integer (or Infinity), but has been removed. 

Number.parseFloat() 
 The value is the same as parseFloat() of the global object. 

Number.parseInt() 
 The value is the same as parseInt() of the global object. 

