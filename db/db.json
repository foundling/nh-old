{
  "Array": {
    "description": "Arrays are list-like objects whose prototype has methods to perform traversal and mutation operations. Neither the length of a JavaScript array nor the types of its elements are fixed. Since an array's size length grow or shrink at any time, JavaScript arrays are not guaranteed to be dense. In general, these are convenient characteristics; but if these features are not desirable for your particular use, you might consider using typed arrays.Some people think that you shouldn't use an array as an associative array. In any case, you can use plain objects instead, although doing so comes with its own caveats. See the post Lightweight JavaScript dictionaries with arbitrary keys as an example.",
    "syntax": "[element0, element1, ..., elementN]\nnew Array(element0, element1[, ...[, elementN]])\nnew Array(arrayLength)",
    "parameters": {},
    "prototypeProperties": {
      "Array.prototype.constructor": "Specifies the function that creates an object's prototype.",
      "Array.prototype.length": "Reflects the number of elements in an array."
    },
    "prototypeMethods": {},
    "constructorProperties": {
      "Array.length": "The Array constructor's length property whose value is 1.",
      "Array.prototype": "Allows the addition of properties to all array objects."
    },
    "constructorMethods": {
      "Array.from": "Creates a new Array instance from an array-like or iterable object.",
      "Array.isArray": "Returns true if a variable is an array, if not false.",
      "Array.observe": "Asynchronously observes changes to Arrays, similar to Object.observe() for objects. It provides a stream of changes in order of occurrence.",
      "Array.of": "Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments."
    }
  },
  "Error": {
    "description": "Runtime errors result in new Error objects being created and thrown.This page documents the use of the Error object itself and its use as a constructor function. For a list of properties and methods inherited by Error instances, see Error.prototype.",
    "syntax": "new Error([message[, fileName[, lineNumber]]])",
    "parameters": {
      "message": "Optional. Human-readable description of the error.",
      "fileName": "Optional. The value for the fileName property on the created Error object. Defaults to the name of the file containing the code that called the Error() constructor.",
      "lineNumber": "Optional. The value for the lineNumber property on the created Error object. Defaults to the line number containing the Error() constructor invocation."
    },
    "prototypeProperties": {
      "Error.prototype.constructor": "Specifies the function that created an instance's prototype.",
      "Error.prototype.message": "Error message.",
      "Error.prototype.name": "Error name.",
      "Error.prototype.description": "Error description. Similar to message.",
      "Error.prototype.number": "Error number.",
      "Error.prototype.fileName": "Path to file that raised this error.",
      "Error.prototype.lineNumber": "Line number in file that raised this error.",
      "Error.prototype.columnNumber": "Column number in line that raised this error.",
      "Error.prototype.stack": "Stack trace."
    },
    "prototypeMethods": {
      "Error.prototype.toSource()  ": "Returns a string containing the source of the specified Error object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.",
      "Error.prototype.toString()": "Returns a string representing the specified object. Overrides the Object.prototype.toString method."
    },
    "constructorProperties": {
      "Error.prototype": "Allows the addition of properties to Error instances."
    },
    "constructorMethods": {}
  }
}