undefined
this
Infinity
NaN
undefined
null
eval()
uneval()
isFinite()
isNaN()
parseFloat()
parseInt()
decodeURI()
decodeURIComponent()
encodeURI()
encodeURIComponent()
escape()
unescape()
Object
Function
Boolean
Symbol
Error
EvalError
InternalError
RangeError
ReferenceError
SyntaxError
TypeError
URIError
Number
Math
Date
String
RegExp
Array
Int8Array
Uint8Array
Uint8ClampedArray
Int16Array
Uint16Array
Int32Array
Uint32Array
Float32Array
Float64Array
Map
Set
WeakMap
WeakSet
SIMD
SIMD.Float32x4
SIMD.Float64x2
SIMD.Int8x16
SIMD.Int16x8
SIMD.Int32x4
ArrayBuffer
DataView
JSON
Promise
Generator
GeneratorFunction
Reflect
Proxy
Intl
Intl.Collator
Intl.DateTimeFormat
Intl.NumberFormat
Iterator
ParallelArray
StopIteration
URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined 

~~OBJECT~~: undefined 

Description: 
 The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types. 

Syntax:
 undefined 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/this 

~~OBJECT~~: this 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity 

~~OBJECT~~: Infinity 

Description: 
 The global Infinity property is a numeric value representing infinity. 

Syntax:
 Infinity  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN 

~~OBJECT~~: NaN 

Description: 
 The global NaN property is a value representing Not-A-Number. 

Syntax:
 NaN 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined 

~~OBJECT~~: undefined 

Description: 
 The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types. 

Syntax:
 undefined 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null 

~~OBJECT~~: null 

Description: 
 The value null is a JavaScript literal representing null or an "empty" value, i.e. no object value is present. It is one of JavaScript's primitive values. 

Syntax:
 null  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval() 

~~OBJECT~~: eval() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite() 

~~OBJECT~~: isFinite() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval() 

~~OBJECT~~: uneval() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN() 

~~OBJECT~~: isNaN() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat() 

~~OBJECT~~: parseFloat() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI() 

~~OBJECT~~: decodeURI() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt() 

~~OBJECT~~: parseInt() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI() 

~~OBJECT~~: encodeURI() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent() 

~~OBJECT~~: decodeURIComponent() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent() 

~~OBJECT~~: encodeURIComponent() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean 

~~OBJECT~~: Boolean 

Description: 
 The Boolean object is an object wrapper for a boolean value. 

Syntax:
 new Boolean([value]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape() 

~~OBJECT~~: unescape() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function 

~~OBJECT~~: Function 

Description: 
 The Function constructor creates a new Function object. In JavaScript every function is actually a Function object. 

Syntax:
 new Function ([arg1[, arg2[, ...argN]],] functionBody) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape() 

~~OBJECT~~: escape() 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object 

~~OBJECT~~: Object 

Description: 
 The Object constructor creates an object wrapper. 

Syntax:
 // Object initialiser or literal
{ [ nameValuePair1[, nameValuePair2[, ...nameValuePairN] ] ] }

// Called as a constructor
new Object([value]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError 

~~OBJECT~~: EvalError 

Description: 
 The EvalError object indicates an error regarding the global eval() function. 

Syntax:
 new EvalError([message[, fileName[, lineNumber]]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error 

~~OBJECT~~: Error 

Description: 
 The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base objects for user-defined exceptions. See below for standard built-in error types. 

Syntax:
 new Error([message[, fileName[, lineNumber]]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError 

~~OBJECT~~: InternalError 

Description: 
   Non-standard 
      This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. 

Syntax:
 new InternalError([message[, fileName[, lineNumber]]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError 

~~OBJECT~~: RangeError 

Description: 
 The RangeError object indicates an error when a value is not in the set or range of allowed values. 

Syntax:
 new RangeError([message[, fileName[, lineNumber]]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError 

~~OBJECT~~: ReferenceError 

Description: 
 The ReferenceError object represents an error when a non-existent variable is referenced. 

Syntax:
 new ReferenceError([message[, fileName[, lineNumber]]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError 

~~OBJECT~~: SyntaxError 

Description: 
 The SyntaxError object represents an error when trying to interpret syntactically invalid code. 

Syntax:
 new SyntaxError([message[, fileName[, lineNumber]]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError 

~~OBJECT~~: TypeError 

Description: 
 The TypeError object represents an error when a value is not of the expected type. 

Syntax:
 new TypeError([message[, fileName[, lineNumber]]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError 

~~OBJECT~~: URIError 

Description: 
 The URIError object represents an error when a global URI handling function was used in a wrong way. 

Syntax:
 new URIError([message[, fileName[, lineNumber]]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol 

~~OBJECT~~: Symbol 

Description: 
 This is a new technology, part of the ECMAScript 2015 (ES6) standard.This technology's specification has been finalized, but  check the compatibility table for usage and implementation status in various browsers. 

Syntax:
 Symbol([description]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number 

~~OBJECT~~: Number 

Description: 
 The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. 

Syntax:
 new Number(value); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math 

~~OBJECT~~: Math 

Description: 
 Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object. 

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date 

~~OBJECT~~: Date 

Description: 
 Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January, 1970 UTC. 

Syntax:
 new Date();
new Date(value);
new Date(dateString);
new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);
 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String 

~~OBJECT~~: String 

Description: 
 The String global object is a constructor for strings, or a sequence of characters. 

Syntax:
 'string text'
"string text"
"中文 español English हिन्दी العربية português বাংলা русский 日本語 ਪੰਜਾਬੀ 한국어 தமிழ்"String(thing)
new String(thing) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array 

~~OBJECT~~: Array 

Description: 
 The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects. 

Syntax:
 [element0, element1, ..., elementN]
new Array(element0, element1[, ...[, elementN]])
new Array(arrayLength) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array 

~~OBJECT~~: Int8Array 

Description: 
 The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Int8Array(length);
new Int8Array(typedArray);
new Int8Array(object);
new Int8Array(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array 

~~OBJECT~~: Uint8Array 

Description: 
 The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Uint8Array(length);
new Uint8Array(typedArray);
new Uint8Array(object);
new Uint8Array(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray 

~~OBJECT~~: Uint8ClampedArray 

Description: 
 The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Uint8ClampedArray(length);
new Uint8ClampedArray(typedArray);
new Uint8ClampedArray(object);
new Uint8ClampedArray(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array 

~~OBJECT~~: Int16Array 

Description: 
 The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Int16Array(length);
new Int16Array(typedArray);
new Int16Array(object);
new Int16Array(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp 

~~OBJECT~~: RegExp 

Description: 
 The RegExp constructor creates a regular expression object for matching text with a pattern. 

Syntax:
 /pattern/flags
new RegExp(pattern[, flags])
 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array 

~~OBJECT~~: Uint16Array 

Description: 
 The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Uint16Array(length);
new Uint16Array(typedArray);
new Uint16Array(object);
new Uint16Array(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array 

~~OBJECT~~: Int32Array 

Description: 
 The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Int32Array(length);
new Int32Array(typedArray);
new Int32Array(object);
new Int32Array(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array 

~~OBJECT~~: Float32Array 

Description: 
 The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Float32Array(length);
new Float32Array(typedArray);
new Float32Array(object);
new Float32Array(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array 

~~OBJECT~~: Uint32Array 

Description: 
 The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Uint32Array(length);
new Uint32Array(typedArray);
new Uint32Array(object);
new Uint32Array(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array 

~~OBJECT~~: Float64Array 

Description: 
 The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation). 

Syntax:
 new Float64Array(length);
new Float64Array(typedArray);
new Float64Array(object);
new Float64Array(buffer [, byteOffset [, length]]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map 

~~OBJECT~~: Map 

Description: 
 This is a new technology, part of the ECMAScript 2015 (ES6) standard.This technology's specification has been finalized, but  check the compatibility table for usage and implementation status in various browsers. 

Syntax:
 new Map([iterable])
 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap 

~~OBJECT~~: WeakMap 

Description: 
 This is a new technology, part of the ECMAScript 2015 (ES6) standard.This technology's specification has been finalized, but  check the compatibility table for usage and implementation status in various browsers. 

Syntax:
 new WeakMap([iterable])
 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet 

~~OBJECT~~: WeakSet 

Description: 
 This is a new technology, part of the ECMAScript 2015 (ES6) standard.This technology's specification has been finalized, but  check the compatibility table for usage and implementation status in various browsers. 

Syntax:
  new WeakSet([iterable]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set 

~~OBJECT~~: Set 

Description: 
 This is a new technology, part of the ECMAScript 2015 (ES6) standard.This technology's specification has been finalized, but  check the compatibility table for usage and implementation status in various browsers. 

Syntax:
 new Set([iterable]); 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD 

~~OBJECT~~: SIMD 

Description: 
 This is an experimental technology, part of the ECMAScript 2016 (ES7) proposal.Because this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes. 

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD.Float32x4 

~~OBJECT~~: SIMD.Float32x4 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD.Float64x2 

~~OBJECT~~: SIMD.Float64x2 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD.Int8x16 

~~OBJECT~~: SIMD.Int8x16 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView 

~~OBJECT~~: DataView 

Description: 
 The DataView view provides a low-level interface for reading and writing multiple number types in an ArrayBuffer irrespective of the platform's endianness. 

Syntax:
 new DataView(buffer [, byteOffset [, byteLength]]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD.Int32x4 

~~OBJECT~~: SIMD.Int32x4 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer 

~~OBJECT~~: ArrayBuffer 

Description: 
 The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can not directly manipulate the contents of an ArrayBuffer; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer. 

Syntax:
 new ArrayBuffer(length)
 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD.Int16x8 

~~OBJECT~~: SIMD.Int16x8 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON 

~~OBJECT~~: JSON 

Description: 
 The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties it has no interesting functionality of its own. 

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator 

~~OBJECT~~: Generator 

Description: 
 This is a new technology, part of the ECMAScript 2015 (ES6) standard.This technology's specification has been finalized, but  check the compatibility table for usage and implementation status in various browsers. 

Syntax:
 function* gen() { 
  yield 1;
  yield 2;
  yield 3;
}

var g = gen(); // "Generator { }" 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction 

~~OBJECT~~: GeneratorFunction 

Description: 
 The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object. 

Syntax:
 new GeneratorFunction ([arg1[, arg2[, ...argN]],] functionBody) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect 

~~OBJECT~~: Reflect 

Description: 
 This is a new technology, part of the ECMAScript 2015 (ES6) standard.This technology's specification has been finalized, but  check the compatibility table for usage and implementation status in various browsers. 

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy 

~~OBJECT~~: Proxy 

Description: 
 This is a new technology, part of the ECMAScript 2015 (ES6) standard.This technology's specification has been finalized, but  check the compatibility table for usage and implementation status in various browsers. 

Syntax:
 var p = new Proxy(target, handler);
 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl 

~~OBJECT~~: Intl 

Description: 
 The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for Collator, NumberFormat, and DateTimeFormat objects are properties of the Intl object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions. 

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl.Collator 

~~OBJECT~~: Intl.Collator 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator 

~~OBJECT~~: Iterator 

Description: 
 The Iterator function returns an object which implements legacy iterator protocol and iterates over enumerable properties of an object. 

Syntax:
 Iterator(object, [keyOnly]) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl.DateTimeFormat 

~~OBJECT~~: Intl.DateTimeFormat 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl.NumberFormat 

~~OBJECT~~: Intl.NumberFormat 

Description: 
  

Syntax:
  

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray 

~~OBJECT~~: ParallelArray 

Description: 
   ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it. 

Syntax:
 new ParallelArray()
new ParallelArray([element0, element1, ...])
new ParallelArray(arrayLength, elementalFunction) 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/StopIteration 

~~OBJECT~~: StopIteration 

Description: 
   DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time. 

Syntax:
 StopIteration 

URL: 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise 

~~OBJECT~~: Promise 

Description: 
 The Promise object is used for deferred and asynchronous computations. A Promise represents an operation that hasn't completed yet, but is expected in the future. 

Syntax:
 new Promise(executor);
new Promise(function(resolve, reject) { ... }); 

